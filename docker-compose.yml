services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/:/usr/src/backend/
      - static_volume:/usr/src/backend/staticfiles
      - media_volume:/usr/src/backend/mediafiles
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      PYTHONPATH: /usr/src/backend
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/usr/src/frontend
      - /usr/src/frontend/node_modules
    environment:
      BACKEND_BASE_URL: "http://localhost:8000"
      VITE_HOST: "0.0.0.0"

  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    environment:
      PGDATA: /var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pguser -d crud_in_the_cloud_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: "2gb"

  pgadmin4:
    image: elestio/pgadmin:latest
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      PGADMIN_LISTEN_PORT: 80
      GUNICORN_TIMEOUT: 300
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/pgadmin4/servers.json
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-O-", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  pgadmin_data:
  static_volume:
  media_volume:
